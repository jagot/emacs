#+TITLE: Emacs configuration
#+AUTHOR: Stefanos Carlstr√∂m
#+EMAIL: stefanos.carlstrom@gmail.com

#+PROPERTY: header-args :tangle yes :comments org

* Introduction
** References
   - [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's config]]
   - [[https://github.com/grettke/home][Grant Rettke's config]]
   - [[https://github.com/larstvei/dot-emacs][Lars Tveito's config]]
* Misc
  [[http://www.emacswiki.org/emacs/CommonLispForEmacs][Common Lisp macros for Emacs lisp]].
  #+BEGIN_SRC emacs-lisp
    (require 'cl-lib)

    (load "server")
    (unless (server-running-p) (server-start))
  #+END_SRC
** Startup
   #+BEGIN_SRC emacs-lisp
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (load custom-file)
     (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))

     (defvar osx?)
     (setq osx? (not (eq nil (memq window-system '(mac ns)))))
     (when osx?
       (progn
         (let ((default-directory "/usr/local/share/emacs/site-lisp/"))
           (normal-top-level-add-subdirs-to-load-path))
         (require 'osx-osascript)))
   #+END_SRC

** Packages
*** Straight
    #+BEGIN_SRC emacs-lisp
      (defvar bootstrap-version)
      (let ((bootstrap-file
             (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
            (bootstrap-version 5))
        (unless (file-exists-p bootstrap-file)
          (with-current-buffer
              (url-retrieve-synchronously
               "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
               'silent 'inhibit-cookies)
            (goto-char (point-max))
            (eval-print-last-sexp)))
        (load bootstrap-file nil 'nomessage))

      (straight-use-package 'use-package)
      (setq straight-use-package-by-default t)
    #+END_SRC
** DashNS
   #+BEGIN_SRC emacs-lisp
     (use-package dash)
     (use-package s)
   #+END_SRC
** Append to list
   Stolen from https://stackoverflow.com/a/24357106
   #+BEGIN_SRC emacs-lisp
     (defun append-to-list! (list-var elements)
       "Append ELEMENTS to the end of LIST-VAR.

     The return value is the new value of LIST-VAR."
       (unless (consp elements)
         (error "ELEMENTS must be a list"))
       (let ((list (symbol-value list-var)))
         (if list
             (setcdr (last list) elements)
           (set list-var elements)))
       (symbol-value list-var))
   #+END_SRC

** Bind-keys
   #+BEGIN_SRC emacs-lisp
     (use-package bind-key)
   #+END_SRC
** Exec path
   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell)
   #+END_SRC

** Transparency
   #+BEGIN_SRC emacs-lisp
     (defun find-matching-line (pattern lines)
       (first (-filter
               (lambda (l) (s-match pattern l))
               (s-lines lines))))

     (defun get-root-window-id ()
       (let* ((line (find-matching-line
                     "^_NET_SUPPORTING_WM_CHECK:"
                     (shell-command-to-string "xprop -root -notype"))))
         (nth 6 (s-split-words line))))

     (defun get-window-manager ()
       (let* ((root-window-id (get-root-window-id))
              (line (find-matching-line
                     "^_NET_WM_NAME"
                     (shell-command-to-string
                      (concat "xprop -id " root-window-id " -notype")))))
         (s-chop-suffix "\"" (s-chop-prefix "\"" (nth 2 (s-split " " line))))))

     (defvar frame-alpha 95)

     (defun set-emacs-transparency (alpha)
       (setq frame-alpha alpha)
       (set-frame-parameter (selected-frame) 'alpha `(,frame-alpha . ,frame-alpha))
       (add-to-list 'default-frame-alist `(alpha . (,frame-alpha . ,frame-alpha))))

     (set-emacs-transparency 95)

     (defun kwin-blur-emacs (id)
       (interactive)
       (shell-command
        (concat "xprop -f _KDE_NET_WM_BLUR_BEHIND_REGION 32c -set _KDE_NET_WM_BLUR_BEHIND_REGION 0 -id " id ";")))

     (defun get-emacs-window-ids ()
       (-filter 's-numeric?
                (s-lines (shell-command-to-string "xdotool search --class emacs"))))

     (defun try-blur-emacs (alpha)
       (let* ((wm (get-window-manager))
              (blur-cmd
               (cond ((s-equals? wm "KWin") 'kwin-blur-emacs)
                     (t nil))))
         (if blur-cmd
             (progn
               (mapcar (lambda (id) (funcall blur-cmd id)) (get-emacs-window-ids))
               (set-emacs-transparency alpha)))))

     (when (eq (window-system) 'x)
       (try-blur-emacs 80))
   #+END_SRC

** Org mode
   #+BEGIN_SRC emacs-lisp
     (require 'subr-x)
     (straight-use-package 'git)

     (defun org-git-version ()
       "The Git version of org-mode.
     Inserted by installing org-mode or when a release is made."
       (require 'git)
       (let ((git-repo (expand-file-name
                        "straight/repos/org/" user-emacs-directory)))
         (string-trim
          (git-run "describe"
                   "--match=release\*"
                   "--abbrev=6"
                   "HEAD"))))

     (defun org-release ()
       "The release version of org-mode.
     Inserted by installing org-mode or when a release is made."
       (require 'git)
       (let ((git-repo (expand-file-name
                        "straight/repos/org/" user-emacs-directory)))
         (string-trim
          (string-remove-prefix
           "release_"
           (git-run "describe"
                    "--match=release\*"
                    "--abbrev=0"
                    "HEAD")))))

     (provide 'org-version)

     (straight-use-package 'org-plus-contrib)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
      (use-package org
        :bind (("C-c e" . LaTeX-environment)))
   #+END_SRC

** Org tangle configuration
   Borrowed from [[https://github.com/larstvei/dot-emacs][Lars Tveito]].
   #+BEGIN_SRC emacs-lisp
      (use-package ob-tangle
        :straight nil)

      (setq init-file (file-truename (concat user-emacs-directory "init.org")))
      (setq init-file-el (file-truename (concat user-emacs-directory "init.el")))
      (setq init-file-bc (file-truename (concat init-file-el "c")))

      (defun tangle-init ()
        "Tangle the code-blocks of this file, and subsequently
               byte-compile the result."
        (progn
          (org-babel-tangle-file init-file)
          (byte-compile-file init-file-el)))
   #+END_SRC

*** Auto-tangling
    #+BEGIN_SRC emacs-lisp
       (add-hook 'after-save-hook (lambda ()
                                    (when (member (buffer-file-name)
                                                  (list (file-truename init-file)
                                                        (expand-file-name init-file)))
                                      (tangle-init))))

       (when (or
              (and
               (file-exists-p init-file-bc)
               (file-newer-than-file-p init-file init-file-bc))
              (not (file-exists-p init-file-bc)))
         (tangle-init))
    #+END_SRC

** Encoding
   #+BEGIN_SRC emacs-lisp
     (setq locale-coding-system 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)
   #+END_SRC
** Text editing
   #+BEGIN_SRC emacs-lisp
     (add-hook 'text-mode-hook 'turn-on-auto-fill)
     (add-hook 'text-mode-hook 'flyspell-mode)
     (use-package rainbow-delimiters
       :init (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
   #+END_SRC
** Smartparens
   [[https://github.com/Fuco1/smartparens][smartparens]]
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :init
       (progn
         (smartparens-global-mode)
         (sp-local-pair 'hy-mode "'" nil :actions nil)
         (show-smartparens-global-mode t))
       :bind (("C-M-S-p" . sp-add-to-previous-sexp)
              ("C-M-S-n" . sp-add-to-next-sexp)))
     (use-package smartparens-config
       :straight nil)
   #+END_SRC

** Spelling
   #+BEGIN_SRC emacs-lisp
     (setq-default ispell-program-name "aspell")
     (setq-default ispell-dictionary "en_GB-ize")
   #+END_SRC
** Ag
   #+BEGIN_SRC emacs-lisp
     (use-package ag
       :init (setq ag-highlight-search t))
   #+END_SRC
** Yasnippet
   Borrowed from [[http://www.emacswiki.org/emacs/Yasnippet#toc5][Emacs wiki]].
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :init
       (progn
         (yas-global-mode 1)
         (defun yas-popup-isearch-prompt (prompt choices &optional display-fn)
           (when (featurep 'popup)
             (popup-menu*
              (mapcar
               (lambda (choice)
                 (popup-make-item
                  (or (and display-fn (funcall display-fn choice))
                      choice)
                  :value choice))
               choices)
              :prompt prompt
              ;; start isearch mode immediately
              :isearch t
              )))
         (setq yas-prompt-functions '(yas-popup-isearch-prompt yas-ido-prompt yas-no-prompt))))
   #+END_SRC

** Terminal
   Borrowed from [[http://www.emacswiki.org/emacs-ja/AnsiTermHints][Emacs wiki]].
   #+BEGIN_SRC emacs-lisp
     ;; Use this for remote so I can specify command line arguments
     (defun remote-term (new-buffer-name cmd &rest switches)
       (let ((term-ansi-buffer-name
              (apply 'make-term
                     (generate-new-buffer-name
                      (concat "*" new-buffer-name "*"))
                     cmd nil switches)))
       (set-buffer term-ansi-buffer-name)
       (term-mode)
       (term-char-mode)
       ;;(term-set-escape-char ?\C-x)
       (switch-to-buffer term-ansi-buffer-name)))


     ;; Kills buffer when terminal quits
     (defadvice term-sentinel (around my-advice-term-sentinel (proc
                                                               msg))
       (if (memq (process-status proc) '(signal exit))
           (let ((buffer (process-buffer proc)) )
             ad-do-it
             (kill-buffer buffer))
         ad-do-it))
     (ad-activate 'term-sentinel)

     (global-set-key (kbd "<f1>") (lambda ()
                                    (interactive)
                                    (ansi-term "zsh")))
     (global-set-key (kbd "S-<f1>") (lambda ()
                                      (interactive)
                                      (remote-term "lth" "ssh" "lth")))
     (global-set-key (kbd "M-<f1>") (lambda ()
                                      (interactive)
                                      (remote-term "home" "ssh" "home")))
     (add-hook 'term-mode-hook (lambda()
                                 (setq yas-dont-activate t)))

     (defun ag-eshell (string)
       "Search with ag using the current eshell directory and a given string.
        To be used from within an eshell alias
        (`alias ag 'ag-eshell $1'` within eshell)"
        (ag/search string (eshell/pwd)))
   #+END_SRC

*** External terminal
    This is used to open an external terminal emulator and run a
    command there.
    #+BEGIN_SRC emacs-lisp
      (defun get-env-terminal ()
        (let ((env-term (exec-path-from-shell-getenv "TERMINAL")))
          (if (s-blank? env-term)
              "xterm" env-term)))

      (defun iterm2 (&rest args)
        (osascript-run-str
         (concat
          "tell app \"iTerm\"\n"
          "create window with default profile command \"/usr/local/bin/zsh -c '"
          "eval `/usr/libexec/path_helper -s`"
          (mapconcat 'identity args " ")
          "'\"\n"
          "end tell")))

      (defun ext-terminal (wd &rest args)
        (if osx?
            (iterm2 "cd" wd "&&"
                    (mapconcat 'identity args " "))
          (progn
            (apply #'call-process
                   (get-env-terminal)
                   nil 0 nil "-e" (list "/bin/zsh" "-c" (mapconcat 'identity args " "))))))

      (defun ext-cmd-wrap-string (s)
        (concat "\\\"" s "\\\""))
    #+END_SRC

** Web server
   #+BEGIN_SRC emacs-lisp
     (use-package web-server)
   #+END_SRC

** External programs
   #+BEGIN_SRC emacs-lisp
     (defvar opener)
     (setq opener "xdg-open")
     (when osx? (setq opener "open"))
     (when (executable-find "mimeopen") (setq opener "mimeopen"))

     (defun open-in-external-app ()
       "Inspired by
     URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html'"
       (interactive)
       (let ((file-list
              (if (string-equal major-mode "dired-mode")
                  (dired-get-marked-files)
                (list (buffer-file-name)))))
         (when (if (<= (length file-list) 5)
                   t
                 (y-or-n-p "Open more than 5 files? "))
           (mapc
            (lambda (file-path)
              (call-process opener nil 0 nil file-path))
            file-list))))
     (bind-key "C-M-o" 'open-in-external-app dired-mode-map)

     (when osx? (setq insert-directory-program "/usr/local/bin/gls"))
     (eval-after-load "dired-aux"
       '(add-to-list 'dired-compress-file-suffixes
                     '("\\.zip\\'" ".zip" "unzip")))
   #+END_SRC

*** PATH variable
    #+BEGIN_SRC emacs-lisp
      (exec-path-from-shell-initialize)
    #+END_SRC

** Crontab
   #+BEGIN_SRC emacs-lisp
     (defun crontab-e ()
       (interactive)
       (with-editor-async-shell-command "crontab -e"))
   #+END_SRC

** define-word
   #+BEGIN_SRC emacs-lisp
     (use-package define-word
       :init
       (bind-key "C-c D" (lambda (begin end &optional arg)
                           (interactive "r\nP")
                           (if arg
                               (call-interactively 'define-word)
                             (call-interactively 'define-word-at-point)))))
   #+END_SRC

** View Large Files
   #+BEGIN_SRC emacs-lisp
     (use-package vlf)
     (use-package vlf-setup
       :straight nil
       :config
       (custom-set-variables
        '(vlf-application 'dont-ask)))
   #+END_SRC

* Interface
** Misc
   #+BEGIN_SRC emacs-lisp
     (setq confirm-kill-emacs 'y-or-n-p)

     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
     (setq inhibit-startup-screen 't)

     (setq auto-window-vscroll nil)

     (setq truncate-partial-width-windows nil)
     (mouse-wheel-mode t)
     (setq x-select-enable-clipboard t)
     (setq-default auto-revert-interval 1)
     (setq show-trailing-whitespace nil)
     (put 'narrow-to-region 'disabled nil)

     (setq-default indent-tabs-mode nil)

     (setq vc-follow-symlinks nil)
     (setq find-file-visit-truename t)

     (setq ring-bell-function #'ignore)

     ;; (setq auto-save-list-file-prefix (expand-file-name
     ;;                                   "tmp/auto-save-list/.saves-" emacs.d))

     (global-prettify-symbols-mode 1)

     (setf epa-pinentry-mode 'loopback)

     ;; Helps with colors of certain webpages (e.g. Google), when viewed in
     ;; eww (from
     ;; https://emacs.stackexchange.com/questions/2955/how-to-customize-background-color-for-some-web-pages-opened-with-eww)
     (setq shr-color-visible-luminance-min 80)
   #+END_SRC
** Projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile)
     (projectile-global-mode)
     (setq projectile-mode-line
           '(:eval (format " Projectile[%s]"
                     (projectile-project-name))))
   #+END_SRC
** Tramp
   #+BEGIN_SRC emacs-lisp
     (use-package tramp
       :config
       (customize-set-variable
        'tramp-ssh-controlmaster-options
        (concat
         "-o ControlPath=~/.ssh/socket-%%r@%%h:%%p "
         "-o ControlMaster=auto -o ControlPersist=yes")))
   #+END_SRC

** Dashboard
   #+BEGIN_SRC emacs-lisp
     (use-package dashboard
       :config
       (progn
         (dashboard-setup-startup-hook)
         (setq dashboard-items '((recents  . 5)
                                 (projects . 5)
                                 (agenda . 5))
               dashboard-startup-banner 'logo)))
   #+END_SRC

** Mode line
   #+BEGIN_SRC emacs-lisp
     (use-package smart-mode-line
       :init (progn
               (sml/setup)
               (sml/apply-theme 'respectful)
               (add-to-list 'sml/replacer-regexp-list '("^~/work/projects/quantum" ":WPQ:") t)
               (add-to-list 'sml/replacer-regexp-list '("^~/work/projects" ":WP:") t)
               (add-to-list 'sml/replacer-regexp-list '("^~/work/" ":W:") t)))
     (setq display-time-day-and-date 1)
     (setq display-time-24hr-format 1)
     (display-time-mode 1)
   #+END_SRC

** Shortcut keys
   #+BEGIN_SRC emacs-lisp
     (use-package bind-key
       :init
       (progn
         (bind-key "C-?" 'help-command)
         (bind-key "M-?" 'mark-paragraph)
         (bind-key "C-h" 'delete-backward-char)
         (bind-key "M-h" 'backward-kill-word)
         (bind-key "C-j" 'newline)
         (bind-key "C-z" 'undo)

         (bind-key "<f5>" 'revert-buffer)
         (bind-key "C-c <f5>" 'auto-revert-mode)

         (bind-key "C-x C-b" 'ibuffer)

         ;; (bind-key "M-q") '(lambda () (interactive (fill-paragraph 60)))

         (bind-keys*
          ("M-J" . enlarge-window)
          ("M-K" . shrink-window)
          ("M-H" . shrink-window-horizontally)
          ("M-L" . enlarge-window-horizontally))

         (bind-key "C-c SPC w" 'whitespace-mode)
         (bind-key "C-c SPC c" 'whitespace-cleanup)

         (bind-key "C-c #" 'comment-region)

         (bind-key "C-x C-M-e" 'lisp-eval-region)

         (bind-key "<f7>" 'flyspell-buffer)
         (bind-key (kbd "<C-f7>") 'ispell-change-dictionary) ;; Does not work on MBP

         (bind-key "M-S-SPC" (lambda () (interactive) (insert "¬†")))))
   #+END_SRC
*** Super/subscripts
    #+BEGIN_SRC emacs-lisp
      (use-package iso-transl
        :straight nil
        :config
        (iso-transl-define-keys
         `(("^0" . ,(vector (decode-char 'ucs #x2070)))
           ("^4" . ,(vector (decode-char 'ucs #x2074))) ; 1-3 already defined
           ("^5" . ,(vector (decode-char 'ucs #x2075)))
           ("^6" . ,(vector (decode-char 'ucs #x2076)))
           ("^7" . ,(vector (decode-char 'ucs #x2077)))
           ("^8" . ,(vector (decode-char 'ucs #x2078)))
           ("^9" . ,(vector (decode-char 'ucs #x2079)))
           ("^+" . ,(vector (decode-char 'ucs #x207A)))
           ("^-" . ,(vector (decode-char 'ucs #x207B)))
           ("^=" . ,(vector (decode-char 'ucs #x207C)))
           ("^(" . ,(vector (decode-char 'ucs #x207D)))
           ("^)" . ,(vector (decode-char 'ucs #x207E)))
           ("_0" . ,(vector (decode-char 'ucs #x2080)))
           ("_1" . ,(vector (decode-char 'ucs #x2081)))
           ("_2" . ,(vector (decode-char 'ucs #x2082)))
           ("_3" . ,(vector (decode-char 'ucs #x2083)))
           ("_4" . ,(vector (decode-char 'ucs #x2084)))
           ("_5" . ,(vector (decode-char 'ucs #x2085)))
           ("_6" . ,(vector (decode-char 'ucs #x2086)))
           ("_7" . ,(vector (decode-char 'ucs #x2087)))
           ("_8" . ,(vector (decode-char 'ucs #x2088)))
           ("_9" . ,(vector (decode-char 'ucs #x2089)))
           ("_+" . ,(vector (decode-char 'ucs #x208A)))
           ("_-" . ,(vector (decode-char 'ucs #x208B)))
           ("_=" . ,(vector (decode-char 'ucs #x208C)))
           ("_(" . ,(vector (decode-char 'ucs #x208D)))
           ("_)" . ,(vector (decode-char 'ucs #x208E))))))
    #+END_SRC
** Hydras
   Hydras taken from hydra-examples.el in the official distribution.
   #+BEGIN_SRC emacs-lisp
     (use-package hydra)

     (defun hydra-vi/pre ()
       (set-cursor-color "#e52b50"))

     (defun hydra-vi/post ()
       (set-cursor-color "#ffffff"))

     (bind-key
      "C-z"
      (defhydra hydra-vi (:pre hydra-vi/pre :post hydra-vi/post :color amaranth)
        "vi"
        ("l" forward-char)
        ("h" backward-char)
        ("j" next-line)
        ("k" previous-line)
        ("m" set-mark-command "mark")
        ("a" move-beginning-of-line "beg")
        ("e" move-end-of-line "end")
        ("d" delete-region "del" :color blue)
        ("y" kill-ring-save "yank" :color blue)
        ("q" nil "quit")))

     (bind-key
      "C-x SPC"
      (defhydra hydra-rectangle (:body-pre (rectangle-mark-mode 1)
                                           :color pink
                                           :post (deactivate-mark))
        "
       ^_k_^     _d_elete    _s_tring
     _h_   _l_   _o_k        _y_ank
       ^_j_^     _n_ew-copy  _r_eset
     ^^^^        _e_xchange  _u_ndo
     ^^^^        ^ ^         _p_aste
     "
        ("h" backward-char nil)
        ("l" forward-char nil)
        ("k" previous-line nil)
        ("j" next-line nil)
        ("e" hydra-ex-point-mark nil)
        ("n" copy-rectangle-as-kill nil)
        ("d" delete-rectangle nil)
        ("r" (if (region-active-p)
                 (deactivate-mark)
               (rectangle-mark-mode 1)) nil)
        ("y" yank-rectangle nil)
        ("u" undo nil)
        ("s" string-rectangle nil)
        ("p" kill-rectangle nil)
        ("o" nil nil)))

     (global-set-key
      (kbd "S-RET")
      (defhydra hydra-mc (:columns 3)
        "Multiple cursors"
        ("n" mc/mark-next-like-this "Mark next" :color red)
        ("p" mc/mark-previous-like-this "Mark previous" :color red)
        ("a" mc/mark-all-like-this "Mark all" :color blue)

        ("N" mc/skip-to-next-like-this "Skip next" :color red)
        ("P" mc/skip-to-previous-like-this "Skip previous" :color red)
        ("l" mc/edit-lines "Edit lines" :color blue)

        ("M-n" mc/unmark-next-like-this "Unmark next" :color red)
        ("M-p" mc/unmark-previous-like-this "Unmark previous" :color red)
        ("q" nil "quit" :color blue)))

     (defhydra hydra-projectile (:color blue
                                 :columns 4)
       "Projectile"
       ("a" projectile-ag "ag")
       ("b" projectile-switch-to-buffer "switch to buffer")
       ("c" projectile-invalidate-cache "cache clear")
       ("d" projectile-find-dir "dir")
       ("s-f" projectile-find-file "file")
       ("ff" projectile-find-file-dwim "file dwim")
       ("fd" projectile-find-file-in-directory "file curr dir")
       ("g" ggtags-update-tags "update gtags")
       ("i" projectile-ibuffer "Ibuffer")
       ("K" projectile-kill-buffers "Kill all buffers")
       ("o" projectile-multi-occur "multi-occur")
       ("p" projectile-switch-project "switch")
       ("r" projectile-recentf "recent file")
       ("x" projectile-remove-known-project "remove known")
       ("X" projectile-cleanup-known-projects "cleanup non-existing")
       ("z" projectile-cache-current-file "cache current")
       ("q" nil "cancel"))
     (bind-key "C-S-p" 'hydra-projectile/body)
   #+END_SRC
** Modalka
   #+BEGIN_SRC emacs-lisp
     (use-package modalka
       :init
       (progn
         (setq-default cursor-type 'box)
         (setq modalka-cursor-type 'hollow)
         (let ((pairs '(("W" . "M-w")
                        ("Y" . "M-y")
                        ("a" . "C-a")
                        ("b" . "C-b")
                        ("k" . "C-M-b")
                        ("e" . "C-e")
                        ("f" . "C-f")
                        ("j" . "C-M-f")
                        ("g" . "C-g")
                        ("n" . "C-n")
                        ("p" . "C-p")
                        ("v" . "C-v")
                        ("V" . "M-v")
                        ("w" . "C-w")
                        ("y" . "C-y")
                        ("SPC" . "C-SPC")
                        ("M-e" . "C-x C-e")
                        ("#" . "C-c #"))))
           (dolist (pair pairs)
             (modalka-define-kbd (car pair) (cdr pair)))))
       :bind (("<return>" . modalka-mode)))
   #+END_SRC

** OS X-specific configuration
   #+BEGIN_SRC emacs-lisp
     (when osx?
       (progn
         (setq mac-option-modifier nil
               mac-command-modifier 'meta
               x-select-enable-clipboard t
               ns-use-native-fullscreen nil
               alert-default-style 'growl
               insert-directory-program "gls")
         (menu-bar-mode 1)
         (setq-default org-babel-python-command "python3")
         (setenv "LC_ALL" "en_US.UTF-8")
         (setenv "LC_CTYPE" "en_US.UTF-8")
         (setenv "LANG" "en_US.UTF-8")))
   #+END_SRC
** Linum mode
   #+BEGIN_SRC emacs-lisp
     (defcustom linum-disabled-modes-list
       '(eshell-mode wl-summary-mode compilation-mode org-mode
                     image-mode dired-mode doc-view-mode)
       "* List of modes disabled when global linum mode is on"
       :type '(repeat (sexp :tag "Major mode"))
       :tag " Major modes where linum is disabled: "
       :group 'linum
       )

     (defcustom linum-disable-starred-buffers 't
       "* Disable buffers that have stars in them like *Gnu Emacs*"
       :type 'boolean
       :group 'linum)

     (defun linum-on ()
       "* When linum is running globally, disable line number in
     modes defined in `linum-disabled-modes-list'. Changed by
     linum-off. Also turns off numbering in starred modes like *scratch*"
       (unless (or (minibufferp)
                   (member major-mode linum-disabled-modes-list)
                   (and linum-disable-starred-buffers (string-match "*" (buffer-name)))
                   (> (buffer-size) 1000000))
         (linum-mode 1)))

     (use-package linum
       :init
       (progn
         (setq linum-format "%3d ")
         (add-hook 'prog-mode-hook (lambda () (linum-mode 1)))))
   #+END_SRC
** Theme
   #+BEGIN_SRC emacs-lisp
     (defvar emacs-dark-theme)
     (defvar emacs-light-theme)
     (use-package gruvbox-theme)
     (setq emacs-dark-theme 'gruvbox-dark-medium)
     (setq emacs-light-theme 'gruvbox-light-medium)
     (load-theme emacs-dark-theme t)
     (load-theme emacs-light-theme t)

     (defun set-theme (theme)
       (mapcar 'disable-theme custom-enabled-themes)
       (enable-theme theme)
       (sml/apply-theme 'respectful))

     (set-theme emacs-dark-theme)
   #+END_SRC
*** Fonts
     #+BEGIN_SRC emacs-lisp
       (set-frame-font "JuliaMono-14" nil t)
       (set-fontset-font t 'greek "JuliaMono")
       (set-fontset-font t 'cyrillic "JuliaMono")
       (set-fontset-font t 'mathematical "JuliaMono")
       (set-fontset-font t 'symbol "JuliaMono")
       ;; (set-fontset-font t (cons #x2070 #x209F) "JuliaMono")
       (set-fontset-font t #x22c5 "JuliaMono")
       (set-fontset-font t 'hangul
                         (font-spec :family "Nanum Gothic"))
       (set-fontset-font t 'japanese-jisx0208
                         (font-spec :family "Kozuka Gothic Pr6N"))
     #+END_SRC
**** Fira Code
     #+BEGIN_SRC emacs-lisp
       (defvar fira-code?)
       (when osx?
         (progn
           ;; (set-frame-font "Fira Code Retina-15" nil t)
           (setq mac-auto-operator-composition-characters "!\"#$%&'*+,-./:;<=>?@^_`|~")
           (mac-auto-operator-composition-mode)
           ;; (setq fira-code? t)
           ))
     #+END_SRC
**** Prettify symbols
     #+BEGIN_SRC emacs-lisp
       (defvar standard-prettify-symbols-alist)
       (setq standard-prettify-symbols-alist
             '(("&&" . ?‚àß)
               ("||" . ?‚à®)))
       (setq if-not-fira-code-prettify-symbols-alist
             '(("!=" . ?‚â†)
               ("<=" . ?‚â§)
               (">=" . ?‚â•)))

       (defun prettify-if-not-fira (in-any-case if-not-fira)
         (let ((symbols-alist (if (not fira-code?)
                                  (-snoc standard-prettify-symbols-alist
                                         if-not-fira-code-prettify-symbols-alist)
                                standard-prettify-symbols-alist)))
           (if in-any-case
               (append-to-list! 'symbols-alist in-any-case))
           (if (not fira-code?)
               (append-to-list! 'symbols-alist if-not-fira))
           symbols-alist))
     #+END_SRC


*** Highlight current line
    #+BEGIN_SRC emacs-lisp
      (global-hl-line-mode 1)
      (defvar hl-dark-colour)
      (defvar hl-light-colour)
      (setq hl-dark-colour "#4F4F4F")
      (setq hl-light-colour "#CDD9FF")
      ;; (set-face-background 'hl-line hl-dark-colour)
    #+END_SRC
*** Darkroom
    Function to quickly toggle between dark/light themes, useful in
    conjunction with f-lux' darkroom mode.
    #+BEGIN_SRC emacs-lisp
      (defvar in-darkroom)
      (setq in-darkroom nil)

      (defun toggle-darkroom ()
        "Enable f-lux' darkroom-friendly colours."
        (interactive)
        (if (not in-darkroom)
            (progn
              (set-theme emacs-light-theme)
            (setq in-darkroom 't))
          (progn
            (set-theme emacs-dark-theme)
            (setq in-darkroom nil))))
      (bind-key "C-c d" 'toggle-darkroom)
    #+END_SRC
** Multiple cursors
   #+BEGIN_SRC emacs-lisp
     (use-package multiple-cursors
       :bind (("C-S-c C-S-c" . mc/edit-lines)
              ("C->" . mc/mark-next-like-this)
              ("C-<" . mc/mark-previous-like-this)
              ("C-c C-<" . mc/mark-all-like-this)))
   #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :bind (("C-c m" . magit-status))
       :init
       (progn
         (setq magit-last-seen-setup-instructions "1.4.0")))

     (use-package magit-gitflow
       :init
       (add-hook 'magit-mode-hook 'turn-on-magit-gitflow))

     (use-package forge
       :after magit)
   #+END_SRC
** Ace-window
   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :init (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
       :bind (("C-x o" . ace-window)))
   #+END_SRC
** Ivy/Counsel
*** Ivy
    #+BEGIN_SRC emacs-lisp
      (use-package ivy
        :diminish (ivy-mode . "")
        :bind
        (:map ivy-mode-map
              ("C-'" . ivy-avy))
        :config
        (ivy-mode 1)
        ;; add `recentf-mode' and bookmarks to `ivy-switch-buffer'.
        (setq ivy-use-virtual-buffers t)
        ;; number of result lines to display
        (setq ivy-height 15)
        ;; does not count candidates
        (setq ivy-count-format "")
        ;; no regexp by default
        (setq ivy-initial-inputs-alist nil)
        ;; configure regexp engine.
        (setq ivy-re-builders-alist
              ;; allow input not in order
              '((ivy-switch-buffer . ivy--regex-fuzzy)
                (counsel-find-file . ivy--regex-plus)
                (counsel-M-x . ivy--regex-plus)
                (t   . ivy--regex-plus))))
      (use-package ivy-hydra)
      (setq ivy-switch-buffer-faces-alist
            '((emacs-lisp-mode . swiper-match-face-1)
              (dired-mode . ivy-subdir)
              (org-mode . org-level-4)))
    #+END_SRC
*** Counsel
    #+BEGIN_SRC emacs-lisp
      (use-package counsel
        :bind
        (("M-x" . counsel-M-x)
         ("C-/" . counsel-rg)
         ("C-x C-f" . counsel-find-file)
         ("C-c g" . counsel-git)
         ("C-x l" . counsel-locate)
         ("C-c o" . counsel-outline)
         ("C-x 8 C-m" . counsel-unicode-char)
         ("C-:" . counsel-company)))

      (use-package counsel-projectile
        :config
        (setq counsel-projectile-mode t))
    #+END_SRC

*** Swiper
    #+BEGIN_SRC emacs-lisp
      (use-package swiper
        :bind (("C-s" . swiper)
               ("C-r" . swiper)
               ("C-7" . swiper-mc)))
    #+END_SRC
*** Avy
    #+BEGIN_SRC emacs-lisp
      (use-package avy
        :bind (("M-s" . avy-goto-word-1)))
    #+END_SRC
** Dired
   #+BEGIN_SRC emacs-lisp
     (setq dired-listing-switches "-alh")
     (setq dired-dwim-target t)
   #+END_SRC

*** Peep-dired
    #+BEGIN_SRC emacs-lisp
      (use-package peep-dired
        :defer t
        :bind (:map dired-mode-map
                    ("P" . peep-dired)))
    #+END_SRC

*** dired-launch
    #+BEGIN_SRC emacs-lisp
      (use-package dired-launch
        :init
        (progn
          (dired-launch-enable)
          (setq dired-launch-default-launcher `(,opener))
          (setf dired-launch-extensions-map '())))
    #+END_SRC

*** dired-k
    #+BEGIN_SRC emacs-lisp
      (use-package dired-k
        :bind (:map dired-mode-map
                    ("M-k" . dired-k)))
    #+END_SRC

** Visual regexp
   #+BEGIN_SRC emacs-lisp
     (use-package visual-regexp
       :init
       (bind-key "C-c r" (lambda (arg)
                           (interactive "P")
                           (princ arg)
                           (if arg
                               (call-interactively 'vr/query-replace)
                             (call-interactively 'vr/replace)))))
   #+END_SRC

** Calc
   #+BEGIN_SRC emacs-lisp
     (use-package calc)
     (bind-key "<backtab>" 'calc-roll-up calc-mode-map)
   #+END_SRC

*** CalcTeX
    #+BEGIN_SRC emacs-lisp
      (use-package calctex
        :straight (calctex
                   :type git :host github :repo "johnbcoughlin/calctex"))
    #+END_SRC

* Programming
** Company
   #+BEGIN_SRC emacs-lisp
     (use-package company-math)
     (use-package company
       :config
       (progn
         (setq company-tooltip-limit 20
               company-idle-delay 0.5
               company-show-numbers t
               company-tooltip-align-annotations t)
         (global-company-mode))
       :bind (("<C-tab>" . company-complete)))
     (use-package company-quickhelp
       :init (progn
               (company-quickhelp-mode 1)
               (setq company-quickhelp-color-foreground (face-attribute 'default :foreground)
                     company-quickhelp-color-background (face-attribute 'default :background))))
   #+END_SRC
** Flycheck
   [[https://github.com/flycheck/flycheck][Flycheck]]
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :init
       (progn
         (add-hook 'after-init-hook #'global-flycheck-mode)
         (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))
         (add-hook 'c++-mode-hook (lambda () (setq flycheck-clang-language-standard "c++11")))
         ;; (add-hook 'flycheck-mode-hook #'flycheck-typescript-tslint-setup)
         ))
   #+END_SRC

** Coverage
   #+BEGIN_SRC emacs-lisp
     (use-package coverage
       :straight (coverage :type git :host github :repo "google/coverage"))

     (defun cov-toggle (arg)
       (interactive "p")
       (if (= arg 4)
           (cov-hide)
         (cov-show)))

     (bind-key "C-x c" 'cov-toggle)
   #+END_SRC

** C/C++
   [[https://github.com/rocky/emacs-dbgr][emacs-dbgr]]
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
     (add-hook 'c++-mode-hook #'modern-c++-font-lock-mode)
     (add-hook 'c-mode-common-hook
               (lambda ()
                 (company-mode)
                 (bind-key "C-c c" 'compile)
                 (setq prettify-symbols-alist
                       (prettify-if-not-fira '(("M_PI" . ?œÄ)) '()))))
     (defun start-debugger ()
       (interactive)
       (if (null cppcm-src-dir)
           (realgud:gdb)
         (realgud:gdb
          (let ((exe-path (cppcm-get-exe-path-current-buffer)))
            (concat "gdb --fullname " exe-path)))))
     (use-package realgud
       :bind (("C-c g" . start-debugger)))
     (use-package realgud-lldb
       :straight (realgud-lldb
                  :type git :host github :repo "realgud/realgud-lldb"
                  :files ("realgud-lldb.el"
                          "lldb")))
   #+END_SRC

*** Cmake
    [[https://github.com/redguardtoo/cpputils-cmake][cpputils-cmake]]
    #+BEGIN_SRC emacs-lisp
      (use-package cpputils-cmake
        :init
        (progn
          (add-hook 'c-mode-common-hook
                    (lambda ()
                      (if (derived-mode-p 'c-mode 'c++-mode)
                          (cppcm-reload-all))))
          (setq cppcm-write-flymake-makefile nil)))
    #+END_SRC

*** Header guards
    #+BEGIN_SRC emacs-lisp
      (defun traverse-project (dir file)
        "Return the path of the current file relative to the project root."
        (let ((stop-dirs
               (list (expand-file-name "~") ; Stop at $HOME
                     "/tmp"
                     "/"
                     (expand-file-name (concat dir "/../src")) ; Stop if current directory is named src
                     (expand-file-name (concat dir "/../libs")) ; or libs
                     (expand-file-name (concat dir "/../include")))) ; or include
              (ndir (directory-file-name (expand-file-name dir))))
          (let ((relname (file-relative-name file ndir)))
            (if (cl-find ndir stop-dirs :test #'equal)
                relname
              (if (file-accessible-directory-p (expand-file-name (concat ndir "/.git"))) ; If there is a .git directory, stop
                  relname
                (traverse-project (concat ndir "/..") file))))))

      (defun get-header-guard ()
        "Return the header guard symbol to be used for the current file."
        (let* ((file (buffer-file-name))
               (path (traverse-project (file-name-directory file) file)))
          (upcase (cl-substitute
                   ?_ ?. (cl-substitute
                          ?_ ?/ (if (string= (substring path 0 1) "/")
                                    (substring path 1)
                                  path))))))

      (defun insert-header-guard ()
        (interactive)
        (let ((l (length (buffer-name))))
          (when (or (equal (substring (buffer-name) (- l 2)  l) ".h")
                    (equal (substring (buffer-name) (- l 4)  l) ".cuh"))
            (when (not (file-exists-p (buffer-file-name)))
              (let ((header-guard (get-header-guard)))
                (insert (concat "//  @ Project : " (projectile-project-name)))
                (newline)
                (insert (concat "//  @ File Name : " (buffer-name)))
                (newline)
                (insert (concat "//  @ Date : " (format-time-string "%Y-%m-%d")))
                (newline)
                (insert (concat "//  @ Author : Stefanos Carlstr√∂m"))
                (newline)
                (insert "//")
                (newline)
                (insert "//")
                (newline)
                (insert (concat "#ifndef " header-guard))
                (newline)
                (newline)
                (insert (concat "#define " header-guard))
                (newline)(newline)
                (newline)(newline)
                (insert (concat "#endif //" header-guard))
                (forward-line -2))))))

      (add-hook 'c-mode-common-hook 'insert-header-guard)
    #+END_SRC

*** Cuda
    #+BEGIN_SRC emacs-lisp
      (use-package cuda-mode
        :mode (("\\.cu\\'" . cuda-mode)
               ("\\.cuh\\'" . cuda-mode)))
    #+END_SRC

** ESS
   #+BEGIN_SRC emacs-lisp
     (use-package ess)
     (use-package ess-site
       :straight nil)
   #+END_SRC

** Julia
   #+BEGIN_SRC emacs-lisp
     (use-package julia-shell)
     (use-package julia-mode
       :init (add-hook 'julia-mode-hook
                       (lambda ()
                         (setq prettify-symbols-alist
                               (prettify-if-not-fira '() '(("->" . ?‚Ü¶) ("=>" . ?‚§á))))
                         (setq-local company-backends
                                     (append '((company-math-symbols-unicode))
                                             company-backends))
                         (company-mode-on)))
       :bind (("C-c C-c" . julia-shell-run-region)
              ("C-c C-s" . julia-shell-save-and-go)))

     (defun julia-wrapper (env-var)
       (let ((inferior-julia-program-name (exec-path-from-shell-getenv env-var)))
         (julia)))
     (defun julia-master ()
       (interactive)
       (julia-wrapper "JULIA_MASTER"))
     (defun julia-nightly ()
       (interactive)
       (julia-wrapper "JULIA_NIGHTLY"))

     (add-hook 'inferior-ess-mode-hook
               (lambda ()
                 (setq-local company-backends
                             (append '((company-math-symbols-unicode))
                                     company-backends))))

     (defalias 'ess-smart-S-assign #'self-insert-command)

     (setq ess-smart-S-assign-key nil)

     (setq julia-max-block-lookback 20000)
   #+END_SRC

*** Julia coverage
    #+BEGIN_SRC emacs-lisp
      (add-hook 'julia-mode-hook
                (lambda ()
                  (setq-local cov-source-for-file-func
                              (lambda (filename)
                                (let* ((cov-file (first (f-glob "lcov.info" (f-dirname filename)))))
                                  (if cov-file
                                      `(lcov . ,cov-file)
                                    nil))))))
    #+END_SRC

** Lisps
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.al\\'" . lisp-mode))
     (add-to-list 'auto-mode-alist '("\\.kicad_mod\\'" . lisp-mode))
     (add-hook 'inferior-lisp-mode-hook (lambda () (rainbow-delimiters-mode 0)))
     (add-hook 'lisp-mode-common-hook
               (lambda ()
                 (company-mode-on)
                 (setq prettify-symbols-alist
                       '(("lambda" . ?Œª)
                         ("<=" . ?‚â§)
                         (">=" . ?‚â•)))))
   #+END_SRC
*** Clojure
    #+BEGIN_SRC emacs-lisp
      (use-package clojure-mode
        :mode "\\.clj\\'"
        :config (use-package cider
                :init
                (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)))
    #+END_SRC
*** Hy
    #+BEGIN_SRC emacs-lisp
      (use-package hy-mode
        :mode "\\.hy\\'"
        :config
        (add-hook 'hy-mode-hook
                  (lambda () (bind-key "C-c M-j" 'inferior-lisp))))
    #+END_SRC

*** Scheme
    #+BEGIN_SRC emacs-lisp
      (use-package geiser
        :config
        (setq geiser-active-implementations '(chicken guile racket)))
    #+END_SRC

** Rainbow colors
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-mode
       :config
       (progn
         (add-hook 'html-mode-hook 'rainbow-mode)
         (add-hook 'css-mode-hook 'rainbow-mode)
         (add-hook 'org-mode-hook 'rainbow-mode)
         (add-hook 'emacs-lisp-mode-hook 'rainbow-mode)))
   #+END_SRC

** OCaml
   #+BEGIN_SRC emacs-lisp
     (use-package tuareg)
     (use-package utop
       :init
       (progn
         (autoload 'utop-minor-mode "utop" "Minor mode for utop" t)
         (add-hook 'tuareg-mode-hook 'utop-minor-mode)))

     (let ((opam-share
            (ignore-errors (car (process-lines "opam" "config" "var"
                                               "share")))))
       (when (and opam-share (file-directory-p opam-share))
         ;; Register Merlin
         (add-to-list 'load-path (expand-file-name "emacs/site-lisp" opam-share))
         (use-package ocp-indent)
         (autoload 'merlin-mode "merlin" nil t nil)
         ;; Automatically start it in OCaml buffers
         (add-hook 'tuareg-mode-hook 'merlin-mode t)
         (add-hook 'caml-mode-hook 'merlin-mode t)
         ;; Use opam switch to lookup ocamlmerlin binary
         (setq merlin-command 'opam)
         (with-eval-after-load 'company
           (add-to-list 'company-backends 'merlin-company-backend))
         (add-hook 'merlin-mode-hook 'company-mode)
         (setq utop-command "opam config exec -- utop -emacs")))
   #+END_SRC

** Python
   #+BEGIN_SRC emacs-lisp
     (setq python-shell-interpreter "ipython")
   #+END_SRC

** Ruby
   #+BEGIN_SRC emacs-lisp
     (use-package rvm)
     (use-package ruby-mode
       :mode "\\.rb\\'"
       :config
       (rvm-use-default))
               (use-package inf-ruby
       :hook (ruby-mode . inf-ruby-minor-mode))
     (use-package bundler)
   #+END_SRC

** Language Server Protocol
   #+BEGIN_SRC emacs-lisp
     ;; Ref: https://www.mortens.dev/blog/emacs-and-the-language-server-protocol/

     (use-package lsp-mode
       :commands lsp
       :requires lsp-clients
       :config
       (setq lsp-prefer-flymake nil))

     (use-package lsp-ui
       :requires lsp-mode flycheck
       :config
       (add-hook 'lsp-mode-hook 'lsp-ui-mode))

     (use-package company-lsp
       :requires company
       :config
       (push 'company-lsp company-backends)

       ;; Disable client-side cache because the LSP server does a better job.
       (setq company-transformers nil
             company-lsp-async t
             company-lsp-cache-candidates nil))
   #+END_SRC

** Rust
   #+BEGIN_SRC emacs-lisp
     (use-package rust-mode
       :bind (:map rust-mode-map
                   ("C-c c" . rust-run)
                   ("TAB" . company-indent-or-complete-common))
       :hook (rust-mode . lsp))
   #+END_SRC

** Separedit
   #+BEGIN_SRC emacs-lisp
     (use-package separedit
       :straight (separedit
                  :type git :host github :repo "twlz0ne/separedit.el")
       :bind (:map prog-mode-map
                   ("C-c '" . separedit)
                   :map ess-mode-map
                   ("C-c '" . separedit))
       :config
       (setq separedit-default-mode 'markdown-mode))
   #+END_SRC


** Web development
*** Typescript
    #+BEGIN_SRC emacs-lisp
      (use-package typescript-mode
        :mode "\\.ts\\'"
        :config
        (add-hook 'typescript-mode-hook
                  (lambda ()
                    (setq prettify-symbols-alist
                          '(("!=" . ?‚â†)
                            ("<=" . ?‚â§)
                            (">=" . ?‚â•)
                            ("&&" . ?‚àß)
                            ("||" . ?‚à®)
                            ("=>" . ?‚Ü¶)))
                    (tide-setup)
                    (flycheck-mode +1)
                    (setq flycheck-check-syntax-automatically '(save mode-enabled))
                    (eldoc-mode +1)
                    (company-mode-on)
                    (setq company-tooltip-align-annotations t))))
    #+END_SRC
*** Web mode
    #+BEGIN_SRC emacs-lisp
      (use-package web-mode
        :mode ("\\.erb\\'" "\\.tsx\\'")
        :config
        (add-hook 'web-mode-hook
                  (lambda ()
                    (turn-off-smartparens-mode)
                    (when (string-equal "tsx" (file-name-extension buffer-file-name))
                      (tide-setup)
                      (flycheck-mode +1)
                      (setq flycheck-check-syntax-automatically '(save mode-enabled))
                      (eldoc-mode +1)
                      (company-mode-on)))))
    #+END_SRC
*** Rails
    #+BEGIN_SRC emacs-lisp
      (use-package projectile-rails
        :config
        (add-hook 'projectile-mode-hook 'projectile-rails-on))
    #+END_SRC
*** Restclient
    #+BEGIN_SRC emacs-lisp
      (use-package restclient
        :mode ("\\.rest\\'" . restclient-mode))
      (use-package company-restclient
        :config
        (add-to-list 'company-backends 'company-restclient))
    #+END_SRC
*** HAML
    #+BEGIN_SRC emacs-lisp
      (use-package haml-mode)
    #+END_SRC

* Modes
  Misc modes
  #+BEGIN_SRC emacs-lisp
    (use-package matlab-mode
      :mode (("\\.m\\'" . matlab-mode)))

    (autoload 'gedcom-mode "gedcom")
    (setq auto-mode-alist (cons '("\\.ged$" . gedcom-mode) auto-mode-alist))
  #+END_SRC

** Cmake
   #+BEGIN_SRC emacs-lisp
     (use-package cmake-mode
       :mode (("CMakeLists\\.txt\\'" . cmake-mode)
              ("\\.cmake\\'" . cmake-mode))
       :config
       (progn
         (defun cmake-rename-buffer ()
           "Renames a CMakeLists.txt buffer to cmake-<directory name>."
           (interactive)
           (when (and (buffer-file-name) (string-match "CMakeLists.txt" (buffer-name)))
             (let ((new-buffer-name (concat "cmake-"
                                            (file-name-nondirectory
                                             (directory-file-name
                                              (file-name-directory (buffer-file-name)))))))
               (rename-buffer new-buffer-name t))))

         (add-hook 'cmake-mode-hook (function cmake-rename-buffer))

         (add-hook 'cmake-mode-hook
                   '(lambda()
                      (local-set-key (kbd "C-c q") 'cmake-quick-document)
                      (defun cmake-quick-document()
                        (interactive)
                        (beginning-of-line)
                        (insert (concat "project(" (read-string "Project name: ") ")\n"))
                        (insert (concat "cmake_minimum_required(VERSION " (read-string "CMake version: " "2.8") ")\n\n"))
                        (when (yes-or-no-p "C++ warnings and optimization flags? ")
                          (insert "set(CMAKE_CXX_FLAGS \"--std=c++11 -Wall -Wextra\")\n")
                          (insert "if(\"${CMAKE_BUILD_TYPE}\" STREQUAL \"Release\")\n")
                          (insert "  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -O3\")\n")
                          (insert "else()\n")
                          (insert "  set(CMAKE_BUILD_TYPE \"Debug\")\n")
                          (insert "  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -O0 -g\")\n")
                          (insert "  add_definitions(\"-DDEBUG\")\n")
                          (insert "endif()\n\n")))))))

     (use-package cmake-font-lock
       :config
       (progn
         (autoload 'cmake-font-lock-activate "cmake-font-lock" nil t)
         (add-hook 'cmake-mode-hook 'cmake-font-lock-activate)))

     (use-package cmake-ide
       :config
       (cmake-ide-setup))

     (defun cmake-ide/c-c++-hook ()
       (with-eval-after-load 'projectile
         (setq cmake-ide-project-dir (projectile-project-root))
         (setq cmake-ide-build-dir (concat cmake-ide-project-dir "build")))
       (cmake-ide-load-db))
     (add-hook 'c++-mode-hook #'cmake-ide/c-c++-hook)

     (bind-key "C-c t c" 'cmake-ide-compile)
     (bind-key "C-c t t" (lambda ()
                           (interactive
                            (compile
                             (format "%s/tests/fsl-tests"
                                      (cmake-ide--get-build-dir))))))
   #+END_SRC
** LaTeX
   #+BEGIN_SRC emacs-lisp
     (use-package tex-site
       :straight nil
       :defer t)

     (use-package tex
       :straight auctex
       :defer t
       :config
       (setq TeX-auto-save t)
       (setq TeX-parse-self t))

     (add-to-list 'auto-mode-alist '("\\.tikz$" . LaTeX-mode))

     (defun latex-start-latexmk (arg)
       (interactive "p")
       (let* ((latexcmd (s-match "LATEX_CMD: \\([a-z]+\\)latex" (buffer-string)))
              (pdflatex
               (concat "-pdflatex='"
                       (if latexcmd (concat (second latexcmd) "latex")
                         "xelatex")
                       "'"))
              (tex-name-pre (concat (file-name-sans-extension buffer-file-name)
                                    ".tex"))
              (tex-name (if osx? (ext-cmd-wrap-string tex-name-pre)
                          tex-name-pre)))
         (if (= arg 4)
             (ext-terminal (ext-cmd-wrap-string default-directory)
                           "latexmk" "-C"
                           pdflatex
                           tex-name))
         (ext-terminal (ext-cmd-wrap-string default-directory)
                       "latexmk" "-shell-escape" "--synctex=1" "-pvc"
                       pdflatex
                       tex-name)))

     (add-hook 'LaTeX-mode-hook
               (lambda ()
                 (bind-key "C-c c" 'latex-start-latexmk LaTeX-mode-map)))
   #+END_SRC
** Ediff
   #+BEGIN_SRC emacs-lisp
     (setq-default ediff-split-window-function 'split-window-horizontally)
     (setq-default ediff-window-setup-function 'ediff-setup-windows-plain)

     ;; Borrowed from http://stackoverflow.com/a/18122275/1079038
     (defvar ediff-dired-file-1)

     (defun ediff-push ()
       (interactive)
       (setq ediff-dired-file-1 (dired-get-filename)))
     (defun ediff-pop ()
       (interactive)
       (ediff-files ediff-dired-file-1 (dired-get-filename)))
     (add-hook 'dired-mode-hook
           (lambda()
                 (define-key dired-mode-map (kbd "C-c u") 'ediff-push)
                 (define-key dired-mode-map (kbd "C-c o") 'ediff-pop)))
   #+END_SRC
** Lilypond
*** Lyqi
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'load-path (expand-file-name "lyqi" user-emacs-directory))
      (use-package lyqi
        :straight nil
        :mode (("\\.ly$" . lyqi-mode)
               ("\\.ily$" . lyqi-mode))
        :init
        (progn
          (setq
           lyqi:prefered-languages '(english)
           lyqi:midi-command "timidity")
          (bind-key "C-c c" (lambda ()
                              (interactive)
                              (save-buffer)
                              (lyqi:compile-ly))))
          :bind (("C-c C-m" . lyqi:open-midi)))
    #+END_SRC
** PKGBUILD
   #+BEGIN_SRC emacs-lisp
     (use-package pkgbuild-mode
       :mode "/PKGBUILD$")
   #+END_SRC
** Word count mode
   #+BEGIN_SRC emacs-lisp
     (use-package wc-mode)
     (setq wc-modeline-format "WC[%W%w/%tw|%C%c/%tc]")
   #+END_SRC

** Docker
   #+BEGIN_SRC emacs-lisp
     (use-package dockerfile-mode
       :mode (("Dockerfile" . dockerfile-mode)))
     (use-package docker)
   #+END_SRC

** Groovy/Jenkins
   #+BEGIN_SRC emacs-lisp
     (use-package groovy-mode
       :mode (("Jenkinsfile\\'" . groovy-mode)))
   #+END_SRC

** YAML
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode)
   #+END_SRC
** TOML
   #+BEGIN_SRC emacs-lisp
     (use-package toml-mode)
   #+END_SRC

* Org
** Org configuration
   #+BEGIN_SRC emacs-lisp
     (setq org-directory (expand-file-name "org" "~"))
     (setq org-default-notes-file (expand-file-name "notes.org" org-directory))

     (setq org-hide-leading-stars 't)
     (setq org-src-fontify-natively 't)

     (add-hook 'org-mode-hook 'org-display-inline-images)
     (add-hook 'org-mode-hook (lambda ()
                                (linum-mode -1)))

     (use-package org-mouse
       :straight nil)
     (use-package ox-beamer
       :straight nil)
   #+END_SRC
** Org keymap
   #+BEGIN_SRC emacs-lisp
     (bind-keys* :prefix "C-;" :prefix-map my-org-map
                 ("a" . org-agenda)
                 ("C-a". (lambda ()
                           (interactive)
                           (find-file (first (org-agenda-files)))))
                 ("l" . org-store-link)
                 ("C-l" . org-insert-link)
                 ("c" . org-capture))
   #+END_SRC

** Org agenda
   #+BEGIN_SRC emacs-lisp
     (use-package org-depend
       :straight nil)
     (setq org-agenda-files
           (if (f-directory? "~/org")
               '("~/org/todo.org" "~/org/notes.org"
                              "~/org/research.org" "~/org/teaching.org"
                 "~/org/lss.org")
             '()))
   #+END_SRC

** Org functions
   Borrowed from [[http://wenshanren.org/?p=334][Ren Wenshan]].
   #+BEGIN_SRC emacs-lisp
     (setq src-code-types
           '("emacs-lisp" "python" "julia" "C" "sh" "java" "js" "clojure" "C++" "css"
             "calc" "asymptote" "dot" "gnuplot" "ledger" "lilypond" "mscgen"
             "octave" "oz" "plantuml" "R" "sass" "screen" "sql" "awk" "ditaa"
             "haskell" "latex" "lisp" "matlab" "ocaml" "org" "perl" "ruby"
             "scheme" "sqlite"))

     (defun org-insert-src-block (src-code-type)
       "Insert a `SRC-CODE-TYPE' type source code block in org-mode."
       (interactive
        (list (completing-read "Source code type: " src-code-types)))
       (progn
         (newline-and-indent)
         (insert (format "#+BEGIN_SRC %s\n" src-code-type))
         (newline-and-indent)
         (insert "#+END_SRC\n")
         (forward-line -2)
         (org-edit-src-code)))
     (bind-key "C-c s" 'org-insert-src-block org-mode-map)

     (defun org-insert-session-header (src-code-type)
       "Insert a session header for the current Org file."
       (interactive
        (list (completing-read "Source code type: " src-code-types)))
       (progn
         (newline-and-indent)
         (insert (format "#+PROPERTY: header-args:%s :session *%s-%s*\n"
                         src-code-type src-code-type (f-base buffer-file-name)))))
     (bind-key "C-c C-s" 'org-insert-session-header org-mode-map)
   #+END_SRC
** Org Babel
   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((python . t)
        (emacs-lisp . t)
        (calc . t)
        (julia . t)
        (C . t)
        (shell . t)
        (ruby . t)
        (clojure . t)
        (octave . t)
        (latex . t)))
     (setq org-confirm-babel-evaluate nil)
     (use-package ob-clojure
       :straight nil
       :defer t
       :config (setq org-babel-clojure-backend 'cider))
     (setq org-babel-julia-write-object-command
           (s-join ";"
                   '("ob_julia_str(f::AbstractString,o)=open(f,\"w\") do file"
                     "  show(file, \"text/plain\", o)"
                     "end"
                     "ob_julia_str(\"%s\",%s)"))
           )
     (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
   #+END_SRC
** Org export
   #+BEGIN_SRC emacs-lisp
     (use-package ox-pandoc)

     (defun sa-ignore-headline (contents backend info)
       "Ignore headlines with tag `ignoreheading'."
       (when (and (org-export-derived-backend-p backend 'latex 'html 'ascii)
                  (string-match "\\`.*ignoreheading.*\n"
                                (downcase contents)))
         (replace-match "" nil nil contents)))

     (add-to-list 'org-export-filter-headline-functions 'sa-ignore-headline)
   #+END_SRC

** Org LaTeX export
   #+BEGIN_SRC emacs-lisp
     (use-package ox-latex
       :straight nil)
     (setq org-latex-listings 'minted)

     ;; Default packages included in every tex file, pdflatex, xelatex or lualatex
     (setq org-export-latex-packages-alist
           '(("" "graphicx" t)
             ("" "longtable" nil)
             ("" "float" nil)))

     ;; Originally taken from Bruno Tavernier: http://thread.gmane.org/gmane.emacs.orgmode/31150/focus=31432
     ;; but adapted to use latexmk 4.20 or higher.
     (defun my-auto-tex-cmd (backend)
       "When exporting from .org with latex, automatically run latex,
          pdflatex, or xelatex as appropriate, using latexmk."
       (setq org-latex-pdf-process
             (cond
              ;; oldstyle latex via dvi
              ((string-match "LATEX_CMD: dvilatex" (buffer-string))
               "latexmk -dvi -pdfps %f")
              ;; xelatex -> .pdf
              ((string-match "LATEX_CMD: xelatex" (buffer-string))
               "latexmk -pdflatex='xelatex -shell-escape' -pdf %f")
              ;; lualatex-dev -> .pdf
              ((string-match "LATEX_CMD: lualatex-dev" (buffer-string))
               "latexmk -pdflatex='lualatex-dev -shell-escape' -pdf %f")
              ;; lualatex -> .pdf
              ((string-match "LATEX_CMD: lualatex" (buffer-string))
               "latexmk -pdflatex='lualatex -shell-escape' -pdf %f")
              ;; default command: pdflatex
              (t "latexmk -pdflatex='pdflatex -shell-escape' -pdf %f"))))

     (add-hook 'org-export-before-processing-hook 'my-auto-tex-cmd)

     (use-package ox-bibtex
       :straight nil)
     (use-package ox-md
       :straight nil)

     (bind-key "C-c c" 'latex-start-latexmk org-mode-map)
   #+END_SRC
** Out{org/shine}

   #+BEGIN_SRC emacs-lisp
     (defvar outline-minor-mode-prefix "\M-#")
     (use-package outshine
       :init
       (progn
         (add-hook 'outline-minor-mode-hook 'outshine-mode)
         (add-hook 'c-mode-common-hook 'outline-minor-mode)
         (add-hook 'sh-mode-common-hook 'outline-minor-mode)
         (add-hook 'julia-mode-hook 'outline-minor-mode)))
   #+END_SRC
** Org preview LaTeX
   #+BEGIN_SRC emacs-lisp
     (bind-key "C-x p" 'org-toggle-latex-fragment)
     (setq org-latex-create-formula-image-program 'dvisvgm)
     (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.4))
     (add-to-list 'org-latex-default-packages-alist '("" "maths" t) t)
     (add-to-list 'org-latex-default-packages-alist '("" "physics" t) t)
     ;; (add-to-list 'org-latex-default-packages-alist '("" "tikz" t) t)
     ;; (add-to-list 'org-latex-default-packages-alist '("" "tikz-maths" t) t)
     ;; (eval-after-load "preview"
     ;;   '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{tikzpicture}" t))

     (setq org-preview-latex-process-alist
           '((dvipng :programs
                     ("lualatex" "dvipng")
                     :description "dvi > png" :message "you need to install the programs: latex and dvipng." :image-input-type "dvi" :image-output-type "png" :image-size-adjust
                     (1.0 . 1.0)
                     :latex-compiler
                     ("lualatex -output-format dvi -interaction nonstopmode -output-directory %o %f")
                     :image-converter
                     ("dvipng -fg %F -bg %B -D %D -T tight -o %O %f"))
             (dvisvgm :programs
                      ("xelatex" "dvisvgm")
                      :description "dvi > svg" :message "you need to install the programs: latex and dvisvgm." :use-xcolor t :image-input-type "xdv" :image-output-type "svg" :image-size-adjust
                      (1.7 . 1.5)
                      :latex-compiler
                      ("xelatex -no-pdf -interaction nonstopmode -output-directory %o %f")
                      :image-converter
                      ("dvisvgm %f -n -b min -c %S -o %O"))
             (imagemagick :programs
                          ("latex" "convert")
                          :description "pdf > png" :message "you need to install the programs: latex and imagemagick." :use-xcolor t :image-input-type "pdf" :image-output-type "png" :image-size-adjust
                          (1.0 . 1.0)
                          :latex-compiler
                          ("xelatex -no-pdf -interaction nonstopmode -output-directory %o %f")
                          :image-converter
                          ("convert -density %D -trim -antialias %f -quality 100 %O"))))
   #+END_SRC
** Org download
   #+BEGIN_SRC emacs-lisp
     (use-package org-download)
   #+END_SRC

** Org bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC

* Library
** BibTeX
   #+BEGIN_SRC emacs-lisp
     (setq bibtex-autokey-name-case-convert-function 'capitalize
           bibtex-autokey-year-length 4
           bibtex-autokey-year-title-separator ""
           bibtex-autokey-titleword-length 5
           bibtex-autokey-titleword-separator "")
     (defvar bibliography-directory)
     (defvar bibliography-file)
     (defvar bibliography-notes-file)
     (setq bibliography-directory (expand-file-name "~/references")
           bibliography-file (concat bibliography-directory "/references-3.bib")
           bibliography-notes-file (concat bibliography-directory "/notes.org")
           doi-utils-make-notes-function nil)
   #+END_SRC

*** Org-ref
    #+BEGIN_SRC emacs-lisp
      (setq reftex-default-bibliography (list bibliography-file))

      (setq bibtex-autokey-year-length 4
            bibtex-autokey-name-year-separator ""
            bibtex-autokey-year-title-separator "-"
            bibtex-autokey-titleword-separator "-"
            bibtex-autokey-titlewords 0
            bibtex-autokey-titlewords-stretch 1
            bibtex-autokey-titleword-length 5)

      ;; see org-ref for use of these variables
      (setq org-ref-bibliography-notes bibliography-notes-file
            org-ref-default-bibliography (list bibliography-file)
            org-ref-pdf-directory (concat bibliography-directory "/pdfs")
            org-ref-completion-library 'org-ref-ivy-cite)

      (use-package org-ref)
    #+END_SRC

*** Ivy-bibtex
    #+BEGIN_SRC emacs-lisp
      (use-package ivy-bibtex
        :init
        (setq bibtex-completion-bibliography bibliography-file
              bibtex-completion-library-path (concat bibliography-directory "/pdfs")
              bibtex-completion-notes-path (concat bibliography-directory "/notes"))
        :bind
        (("C-c b" . ivy-bibtex)))
    #+END_SRC

*** Citation commands
    #+BEGIN_SRC emacs-lisp
      (org-add-link-type
       "citep" 'ebib
       (lambda (path desc format)
         (cond
          ((eq format 'html)
           (format "(<cite>%s</cite>)" path))
          ((eq format 'latex)
           (if (or (not desc) (equal 0 (search "citep:" desc)))
               (format "\\parencite{%s}" path)
             (format "\\parencite[%s][%s]{%s}"
                     (cadr (split-string desc ";"))
                     (car (split-string desc ";"))  path))))))

      (org-add-link-type
       "citet" 'ebib
       (lambda (path desc format)
         (cond
          ((eq format 'html)
           (format "(<cite>%s</cite>)" path))
          ((eq format 'latex)
           (if (or (not desc) (equal 0 (search "citet:" desc)))
               (format "\\textcite{%s}" path)
             (format "\\textcite[%s][%s]{%s}"
                     (cadr (split-string desc ";"))
                     (car (split-string desc ";"))  path))))))
    #+END_SRC
** Pdf-tools
   #+BEGIN_SRC emacs-lisp
     (use-package pdf-tools
       :init (progn
               (add-hook 'pdf-view-mode-hook 'pdf-view-midnight-minor-mode)
               (add-hook 'pdf-view-mode-hook 'pdf-view-auto-slice-minor-mode)
               (add-hook 'pdf-view-mode-hook 'auto-revert-mode)
               (add-hook 'pdf-view-mode-hook (lambda ()
                                               (setq pdf-view-midnight-colors
                                                     (cons (face-attribute 'default :foreground)
                                                           (face-attribute 'default :background)))))
               (if osx?
                   (setq pdf-tools-handle-upgrades nil
                         pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo"))
               (pdf-tools-install)))
     (when osx?
       (setq pdf-view-use-scaling t))
     (use-package pdf-tools-extension
       :straight nil)
   #+END_SRC
** Textedit links
   #+BEGIN_SRC emacs-lisp
     (defun textedit-open (path)
       (let* ((components (s-split ":" path))
              (file-name (s-chop-prefix "//" (first components)))
              (row (string-to-number (second components)))
              (col (string-to-number (fourth components))))
         (find-file-other-window file-name)
         (goto-char (point-min))
         (forward-line (1- row))
         (forward-char (1- col))))

     (org-add-link-type "textedit" 'textedit-open)
   #+END_SRC


** Interleave
   #+BEGIN_SRC emacs-lisp
     (use-package interleave)
     (setq bibtex-completion-notes-template-multiple-files
           "#+TITLE: Notes on: ${author-or-editor} (${year}): ${title}

     #+INTERLEAVE_PDF: ~/references/pdfs/${=key=}.pdf
     ")
   #+END_SRC
* Music
  #+BEGIN_SRC emacs-lisp
    (use-package simple-mpc
      :bind ("<f8>" . simple-mpc))

    (use-package mingus
      :bind ("C-<f8>" . mingus))
  #+END_SRC
* Mail
** Password management
   #+BEGIN_SRC emacs-lisp
     (use-package password-store)
     (use-package auth-source
       :init
       (progn
         ;;(setq auth-source-debug t)
         (setq auth-source-do-cache t)))

     (use-package auth-source-pass
       :after auth-source
       :init
       (progn
         (auth-source-pass-enable)))
     (use-package pass)
   #+END_SRC
** SMTP
   #+BEGIN_SRC emacs-lisp
     (use-package smtpmail)
     ;; (setq smtpmail-debug-info t)

     (setq
      send-mail-function 'message-smtpmail-send-it
      message-send-mail-function 'message-smtpmail-send-it)
   #+END_SRC
** Mu4e
   Mu4e contexts defined in =site.el=, not checked in.
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path
                  (if osx?
                      "/usr/local/share/emacs/site-lisp/mu/mu4e"
                    "/usr/share/emacs/site-lisp/mu/mu4e"))
     (require 'mu4e)
     (require 'org-mu4e)
     (setq mail-user-agent 'mu4e-user-agent)
     (setq mu4e-change-filenames-when-moving t)

     ;; (use-package mu4e-conversation
     ;;   :straight (mu4e-conversation :type git :host gitlab :repo "ambrevar/mu4e-conversation")
     ;;   :config
     ;;   (global-mu4e-conversation-mode))

     (setq mu4e-completing-read-function 'completing-read
           message-kill-buffer-on-exit t
           mu4e-context-policy 'pick-first
           mu4e-confirm-quit nil
           mu4e-compose-format-flowed t
           mu4e-compose-in-new-frame t
           mu4e-headers-date-format "%Y-%m-%d %H:%M"
           mu4e-view-show-addresses 't
           mu4e-get-mail-command "mbsync -a"
           org-mu4e-convert-to-html t
           mu4e-use-fancy-chars t
           mu4e-attachment-dir "~/Downloads"
           mu4e-view-show-images t)

     ;; This hook is used to trigger opening the password storage before
     ;; attempting to download any mail
     (add-hook 'mu4e-update-pre-hook
               (lambda ()
                 (auth-source-pass-entries)))
   #+END_SRC
** Org-mime
   #+BEGIN_SRC emacs-lisp
     (use-package org-mime)

     (defun org-mime-org-buffer-htmlize ()
       "Create an email buffer containing the current org-mode file
       exported to html and encoded in both html and in org formats as
       mime alternatives."
       (interactive)
       (org-mime-send-buffer 'html)
       (message-goto-to))
   #+END_SRC
** Mu4e + Org-mime
   #+BEGIN_SRC emacs-lisp
     (defun mu4e-compose-org-mail ()
       (interactive)
       (mu4e-compose-new)
       (org-mu4e-compose-org-mode))

     (defun htmlize-and-send ()
       "When in an org-mu4e-compose-org-mode message, htmlize and send it."
       (interactive)
       (when (member 'org~mu4e-mime-switch-headers-or-body post-command-hook)
         (org-mime-htmlize)
         (message-send-and-exit)))

     (add-hook 'org-ctrl-c-ctrl-c-hook 'htmlize-and-send t)
   #+END_SRC
* Site
  #+BEGIN_SRC emacs-lisp
    (let ((site-el (f-join user-emacs-directory "site.el")))
      (if (f-exists? site-el)
          (load-file site-el)))
  #+END_SRC
